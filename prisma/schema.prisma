generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model System {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  deliveryFee Float?
  taxRate     Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id          Int     @id @default(autoincrement())
  roleId      Int
  firstName   String
  lastName    String
  email       String  @unique
  password    String
  profileUrl  String?
  phoneNumber String?
  status String 
  createdAt     DateTime        @default(now())
  role          Role            @relation(fields: [roleId], references: [id])
  reviews       ProductReview[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  addresses     UserAddress[]
  orders        Order[]
}

model UserAddress {
  id        Int      @id @default(autoincrement())
  userId    Int
  address   String
  city      String
  state     String
  zipCode   String
  country   String
  status String @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  

  user User @relation(fields: [userId], references: [id])
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  status String @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users User[]
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  status String @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]
}

model Product {
  id            Int             @id @default(autoincrement())
  categoryId    Int
  name          String
  description   String
  discountPrice Float?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  category      Category        @relation(fields: [categoryId], references: [id])
  images        ProductImage[]
  variants      Variant[]
  reviews       ProductReview[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  orderItems    OrderItem[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
}

model Variant {
  id        Int      @id @default(autoincrement())
  productId Int
  color     String
  size      String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
}

model ProductReview {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Float
  comment   String?
  status String @default("active")
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  userId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlistId Int
  userId     Int
  productId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model Order {
  id          Int      @id @default(autoincrement())
  userId      Int
  discount    Float?
  deliveryFee Float?
  taxRate     Float?
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  orderItems OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}
